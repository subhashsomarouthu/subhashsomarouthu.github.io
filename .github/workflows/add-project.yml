name: Nightly Portfolio Update
on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'

jobs:
  update-portfolio:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      changes: ${{ steps.discover.outputs.changes }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        
      - name: Discover and add new repositories
        id: discover
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_USER: ${{ github.repository_owner }}
        run: |
          # Install yq
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
          
          echo "Fetching existing projects from _data/projects.yml..."
          if [ -f "_data/projects.yml" ]; then
            yq e '.[] | .github_url' _data/projects.yml > existing_projects.txt
          else
            touch existing_projects.txt
            echo "No existing projects.yml file found, creating empty list."
          fi
          
          echo "Fetching all public repositories for user ${GH_USER}..."
          if ! gh repo list ${GH_USER} --visibility=public --json url --jq '.[] | .url' > all_public_repos.txt; then
            echo "Error: Failed to fetch repositories. Check if user exists and has public repos."
            echo "changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          changes_made=false
          echo "Comparing lists to find new projects..."
          
          while read -r repo_url; do
            [ -z "$repo_url" ] && continue
            
            if ! grep -q "$repo_url" existing_projects.txt; then
              echo "Found new repository: $repo_url"
              
              repo_name=$(basename "$repo_url")
              cover_image_path=""
              
              if gh api "repos/${GH_USER}/${repo_name}/contents/portfolio-cover.png" -q ".name" &> /dev/null; then
                cover_image_path="https://raw.githubusercontent.com/${GH_USER}/${repo_name}/main/portfolio-cover.png"
              elif gh api "repos/${GH_USER}/${repo_name}/contents/portfolio-cover.jpg" -q ".name" &> /dev/null; then
                cover_image_path="https://raw.githubusercontent.com/${GH_USER}/${repo_name}/main/portfolio-cover.jpg"
              fi
              
              if [ -n "$cover_image_path" ]; then
                echo "Found cover image: $cover_image_path"
                changes_made=true
                
                if repo_details=$(gh repo view "$repo_url" --json name,description,url,repositoryTopics); then
                  repo_name_val=$(echo "$repo_details" | jq -r '.name')
                  repo_desc=$(echo "$repo_details" | jq -r 'if .description and .description != "" and .description != null then .description else "No description provided." end')
                  repo_url_val=$(echo "$repo_details" | jq -r '.url')
                  
                  repo_topics=$(echo "$repo_details" | jq -r '
                    (.repositoryTopics // [])
                    | if type == "array" then 
                        if length > 0 then 
                          map("    - " + (if type == "string" then . else (.name // .topic.name // .) end)) | join("\n")
                        else
                          "    - general"
                        end
                      elif type == "object" and has("nodes") then
                        if (.nodes | length) > 0 then
                          .nodes | map("    - " + (.name // .topic.name // .)) | join("\n")
                        else
                          "    - general"
                        end
                      else
                        "    - general"
                      end
                  ')
                  
                  repo_desc=$(echo "$repo_desc" | sed 's/"/\\"/g')
                  repo_name_val=$(echo "$repo_name_val" | sed 's/"/\\"/g')
                  
                  # Create new entry
                  mkdir -p _data
                  {
                    echo "- name: \"${repo_name_val}\""
                    echo "  image: \"${cover_image_path}\""
                    echo "  description: \"${repo_desc}\""
                    echo "  github_url: \"${repo_url_val}\""
                    echo "  demo_url: \"\""
                    echo "  tech:"
                    echo "${repo_topics}"
                  } >> _data/projects.yml
                  
                  echo "Added ${repo_url} to _data/projects.yml"
                else
                  echo "Warning: Failed to fetch details for ${repo_url}"
                fi
              else
                echo "Skipping ${repo_url}, no portfolio-cover image found."
              fi
            fi
          done < all_public_repos.txt
          
          if [ "$changes_made" = true ]; then
            echo "Changes were made. Proceeding to commit."
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "No new projects to add. Exiting."
            echo "changes=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Commit and push if files changed
        if: steps.discover.outputs.changes == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "feat: Automatically add new projects to portfolio"
          file_pattern: _data/projects.yml
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "github-actions@github.com"